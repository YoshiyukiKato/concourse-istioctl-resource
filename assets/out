#!/bin/bash

set -e
set -o pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source /opt/resource/common.sh

# Read inputs
source=$1
payload=$(mktemp istioctl-resource-request.XXXXXX)
cat > $payload <&0

# Prepare
setup_resource $payload $source
echo "Resource setup successful."

# Parse parameters
delete=$(jq -r '.params.delete // "false"' < $payload)

deploy_each(){
  if [ $1 = 'delete' ]; then
    istioctl_deploy=istioctl_delete
  else
    istioctl_deploy=istioctl_apply
  fi

  while read -r -d '' path && read -r -d '' type; do
    config_path="$source/$path"
    $istioctl_deploy $config_path $scrubbed_value
  done < <(jq -j '.params.configurations[]? | if .path then (.path // "", .type) else empty end | tostring + "\u0000"'  < $payload)
}

istioctl_apply() {
  ## pass configuration to 1st arg
  logfile="/tmp/log"
  mkdir -p /tmp
  create_cmd=("create" "-f" "$1")
  echo "Running command ${create_cmd[@]}"
  
  set +e
  create_error=$(istioctl "${create_cmd[@]}" 2>&1 | tee $logfile)
  echo $create_error
  
  if [[ $create_error =~ ^Error:( ).+( )already( )exists$ ]]; then
    echo "Create with $1 failed because resource already exists"
    replace_cmd=("replace" "-f" "$1")
    echo "Running command ${replace_cmd[@]}"
    replace_error=$(istioctl "${replace_cmd[@]}" 2>&1 | tee $logfile)
    echo $replace_error
  fi
  set -e
}

istioctl_delete() {
  ## pass configuration to 1st arg
  if [ -z "$1" ]; then
    echo "invalid payload (missing  if delete=true)"
    exit 1
  fi

  logfile="/tmp/log"
  mkdir -p /tmp
  delete_cmd=("delete" "-f" "$1")
  echo "Running command ${delete_cmd[@]}"

  set +e
  delete_error=$(istioctl "${delete_cmd[@]}" 2>&1 | tee $logfile)
  echo $delete_error
  set -e
}

if [ "$delete" = true ]; then
  echo "Deleting configurations"
  deploy_each "delete"
  #result="$(jq -n "{version:{configurations:\"$configurations\", deleted: \"true\"}, metadata: [{name: \"configurations\", value: \"$configurations\"}]}")"
  #echo "$result" | jq -s add  >&3
  echo '{"version":{"ref":"none"}}'
else
  echo "Applying configurations"
  deploy_each "apply"
  #result="$(jq -n "{version:{configurations:\"$configurations\"}, metadata: [{name: \"configurations\", value: \"$configurations\"}]}")"
  #echo "$result" | jq -s add  >&3
  echo '{"version":{"ref":"none"}}'
fi